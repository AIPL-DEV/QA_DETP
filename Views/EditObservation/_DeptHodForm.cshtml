@model DeptHodCreateRequest
@using DETP.Constant
@using DETP;

@{
    var current_dt = ViewData["current_dt"] as CurrentFlow;
    var userDt = DateTime.Now.ToString("M/dd/yyyy HH:mm:ss");
}
@if (current_dt.CurrentState == State.CRITICAL_JOB_STOPPED_DEPT_HOD_FROM_START)
{



    List<User> assignee_table = ViewBag.AssigneeNames;

    <div class="col-12 form-group">
        <input type="hidden" value="3" name="FormType" />
        <label for="assign_to">Assign To</label>
        <select asp-for="AssignedToId" class="select2 form-control">
            <option value="">
                Select Assignee
            </option>
            @for (int i = 0; i < assignee_table.Count; i++)
            {
                <option value="@assignee_table[i].UserId">
                    @assignee_table[i].Name / @assignee_table[i].Email / @assignee_table[i].PNo
                </option>
            }
        </select>
    </div>
    <div class="col-12 form-group">
        <label for="remarks">Dept HOD Input</label>
        <textarea type="text" class="form-control" name="remarks" id="remarks" placeholder="Remarks" required></textarea>
    </div>
    
}

else if (current_dt.CurrentState == State.CRITICAL_JOB_STOPPED_DEPT_HOD_FROM_ASSIGNEE)
{
    <input type="hidden" value="2" name="FormType" />
    <div class="col-12 form-group">
        <label>Non Conformance Closed Satisfactory and Within SLG?</label>
        <select asp-for="Decision" class="form-control">
            <option value="Not Satisfied">Need Clarification</option>
            <option value="Close">Send to Sectional Head QA</option>
        </select>
    </div>

    <div class="col-12 form-group">
        <label for="remarks">Dept HOD Input</label>
        <textarea type="text" class="form-control" asp-for="Remarks" placeholder="Remarks" required></textarea>
    </div>
}
else
{
    <input type="hidden" value="1" name="FormType" />
    <div class="col-12 form-group">
        <label for="remarks">Dept HOD Input</label>
        <textarea type="text" class="form-control" asp-for="Remarks" placeholder="Remarks" required></textarea>
    </div>

    <div class="col-12 form-group">
        <label for="valuerec">Value of Rectification (Rs.)</label>
        <input type="number" class="form-control" asp-for="ValueRec" placeholder="Value of Rectification (Rs.)" required>
    </div>

    <div class="col-12 form-group">
        <label for="timeloss">Time Loss (Days)</label>
        <input type="number" class="form-control" asp-for="TimeLoss" placeholder="Time Loss (Days)" required>
    </div>
    <div class="col-12 form-group">
        <label for="timeval">
            Time Value (Rs.)
        </label>
        <input type="number" class="form-control" asp-for="TimeVal" placeholder="Time Value (Rs.)" required>
    </div>

    <div class="col-12 form-group">
        <label for="remarks">Attachments</label>
        <input type="file" onchange="showImage(this)" class="form-control" name="fileInput" id="fileInput" multiple>
    </div>
    <div class="col-12">
        <div class="row" id="images">
        </div>
    </div>
}
<div class="col-12 form-group">
    <label>Decision By</label>
    <select name="decision_by" id="decision_by" class="form-control">
        <option value="@current_dt.UserId">@current_dt.Name</option>
    </select>
</div>
<div class="col-12 form-group">
    <label>Decision Date</label>

    <input type="text" class="form-control" name="decision_date" id="decision_date" value="@userDt" disabled />

</div>
<script>
    var img_array = [];
    function getBase64(file) {
        var reader = new FileReader();
        reader.readAsDataURL(file);
        reader.onload = function () {

            img_array.push(reader.result);

        };
        reader.onerror = function (error) {
            console.log('Error: ', error);
        };
    }

    $(function () {
        img_array = [];
        var files = document.getElementById('fileInput').files;
        for (var i = 0; i < files.length; i++) {
            if (files.length > 0) {

                var ext = files[i].name.split(".").pop();
                const extensions = ["png", ext == "jpg", ext == "jpeg", ext == "gif", ext == "pdf", ext == "doc", ext == "docx", ext == "xls", ext == "xlsx", ext == "ppt", ext == "pptx"]
                if (extensions.includes(ext)) {
        getBase64(files[i]);
    }
                }
            }
        });

        let rules;
    if ("@(current_dt.CurrentState == State.CRITICAL_JOB_STOPPED_DEPT_HOD_FROM_ASSIGNEE)" == "False") {
        rules = {
            Decision: {
                required: true
            },
            Remarks: {
                required: true
            }
        }
    } else if ("@(current_dt.CurrentState == State.CRITICAL_JOB_STOPPED_DEPT_HOD_FROM_START)" == "False") {
        rules = {
            valuerec: {
                required: true
            },
            remarks: {
                required: true
            },
            assigned_to: {
                required: true
            }
        }
    }
    else rules = {
        ValueRec: {
            required: true
        },
        TimeLoss: {
            required: true
        },
        TimeVal: {
            required: true
        },
        Remarks: {
            required: true
        }
    }

    $('#myform').validate({
        rules: rules,
        messages: {
            decision_date: {
                required: "This field is required"
            }
        },
        errorElement: 'span',
        errorPlacement: function (error, element) {
            error.addClass('invalid-feedback');
            element.closest('.form-group').append(error);
        },
        highlight: function (element, errorClass, validClass) {
            $(element).addClass('is-invalid');
        },
        unhighlight: function (element, errorClass, validClass) {
            $(element).removeClass('is-invalid');
        },
        submitHandler: function (form) {
            Submit(form);
        }
    });
    function Submit(form) {
        if ($('#myform').valid()) {
            $('#modal-loader').modal('show')
            $('#submit_request').prop('disabled', true)

            var url = "@Url.Action("SaveDeptHod", "QAFlow")"
            imgs = [];
            $('.image-upload').each(function () {
                imgs.push($(this).data('src'));
            });
            let myData = new FormData(form);
            myData.append("att", imgs)
            myData.append("ToId", '@current_dt.SubmitTo')
            myData.append("FromId", '@current_dt.FromId')
            myData.append("ObservationId", '@current_dt.ObservationId')
            myData.append("FlowId", '@current_dt.FlowId')
                request(url, myData)
                    .then(response => {
                        $('#modal-loader').modal('hide')
                    })
                    .catch((error) => {
                        $('#modal-loader').modal('hide')
                        if (error.status == 400) {
                            let errors = error.responseJSON.reduce((acc, x) => {
                                acc[x.propertyName] = x.errorMessage;
                                return acc;
                            }, {});
                            console.log(errors)
                            $('#myform').validate().showErrors(errors);
                        }
                    });
        }
    }
</script>
